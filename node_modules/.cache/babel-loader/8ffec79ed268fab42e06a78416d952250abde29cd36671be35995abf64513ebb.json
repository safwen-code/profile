{"ast":null,"code":"var defaultOptions = {\n  active: true,\n  breakpoints: {},\n  delay: 4000,\n  jump: false,\n  playOnInit: true,\n  stopOnInteraction: true,\n  stopOnMouseEnter: false,\n  stopOnLastSnap: false,\n  rootNode: null\n};\nfunction Autoplay() {\n  var userOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var options;\n  var emblaApi;\n  var interaction;\n  var timer = 0;\n  var jump = false;\n  function init(emblaApiInstance, optionsHandler) {\n    emblaApi = emblaApiInstance;\n    var mergeOptions = optionsHandler.mergeOptions,\n      optionsAtMedia = optionsHandler.optionsAtMedia;\n    var optionsBase = mergeOptions(defaultOptions, Autoplay.globalOptions);\n    var allOptions = mergeOptions(optionsBase, userOptions);\n    options = optionsAtMedia(allOptions);\n    jump = options.jump;\n    interaction = options.stopOnInteraction ? destroy : stop;\n    var _emblaApi$internalEng = emblaApi.internalEngine(),\n      eventStore = _emblaApi$internalEng.eventStore,\n      ownerDocument = _emblaApi$internalEng.ownerDocument,\n      ownerWindow = _emblaApi$internalEng.ownerWindow;\n    var emblaRoot = emblaApi.rootNode();\n    var root = options.rootNode && options.rootNode(emblaRoot) || emblaRoot;\n    emblaApi.on('pointerDown', interaction);\n    if (!options.stopOnInteraction) emblaApi.on('pointerUp', reset);\n    if (options.stopOnMouseEnter) {\n      eventStore.add(root, 'mouseenter', interaction);\n      if (!options.stopOnInteraction) eventStore.add(root, 'mouseleave', reset);\n    }\n    eventStore.add(ownerDocument, 'visibilitychange', function () {\n      if (ownerDocument.visibilityState === 'hidden') return stop();\n      reset();\n    });\n    eventStore.add(ownerWindow, 'pagehide', function (event) {\n      if (event.persisted) stop();\n    });\n    if (options.playOnInit) play();\n  }\n  function destroy() {\n    emblaApi.off('pointerDown', interaction);\n    if (!options.stopOnInteraction) emblaApi.off('pointerUp', reset);\n    stop();\n    timer = 0;\n  }\n  function play(jumpOverride) {\n    stop();\n    if (typeof jumpOverride !== 'undefined') jump = jumpOverride;\n    timer = window.setTimeout(next, options.delay);\n  }\n  function stop() {\n    if (!timer) return;\n    window.clearTimeout(timer);\n  }\n  function reset() {\n    if (!timer) return;\n    stop();\n    play();\n  }\n  function next() {\n    var _emblaApi$internalEng2 = emblaApi.internalEngine(),\n      index = _emblaApi$internalEng2.index;\n    var lastIndex = emblaApi.scrollSnapList().length - 1;\n    var kill = options.stopOnLastSnap && index.get() === lastIndex;\n    if (kill) return destroy();\n    if (emblaApi.canScrollNext()) {\n      emblaApi.scrollNext(jump);\n    } else {\n      emblaApi.scrollTo(0, jump);\n    }\n    play();\n  }\n  var self = {\n    name: 'autoplay',\n    options: userOptions,\n    init: init,\n    destroy: destroy,\n    play: play,\n    stop: stop,\n    reset: reset\n  };\n  return self;\n}\nAutoplay.globalOptions = undefined;\nexport { Autoplay as default };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["const defaultOptions = {\n  active: true,\n  breakpoints: {},\n  delay: 4000,\n  jump: false,\n  playOnInit: true,\n  stopOnInteraction: true,\n  stopOnMouseEnter: false,\n  stopOnLastSnap: false,\n  rootNode: null\n};\n\nfunction Autoplay(userOptions = {}) {\n  let options;\n  let emblaApi;\n  let interaction;\n  let timer = 0;\n  let jump = false;\n  function init(emblaApiInstance, optionsHandler) {\n    emblaApi = emblaApiInstance;\n    const {\n      mergeOptions,\n      optionsAtMedia\n    } = optionsHandler;\n    const optionsBase = mergeOptions(defaultOptions, Autoplay.globalOptions);\n    const allOptions = mergeOptions(optionsBase, userOptions);\n    options = optionsAtMedia(allOptions);\n    jump = options.jump;\n    interaction = options.stopOnInteraction ? destroy : stop;\n    const {\n      eventStore,\n      ownerDocument,\n      ownerWindow\n    } = emblaApi.internalEngine();\n    const emblaRoot = emblaApi.rootNode();\n    const root = options.rootNode && options.rootNode(emblaRoot) || emblaRoot;\n    emblaApi.on('pointerDown', interaction);\n    if (!options.stopOnInteraction) emblaApi.on('pointerUp', reset);\n    if (options.stopOnMouseEnter) {\n      eventStore.add(root, 'mouseenter', interaction);\n      if (!options.stopOnInteraction) eventStore.add(root, 'mouseleave', reset);\n    }\n    eventStore.add(ownerDocument, 'visibilitychange', () => {\n      if (ownerDocument.visibilityState === 'hidden') return stop();\n      reset();\n    });\n    eventStore.add(ownerWindow, 'pagehide', event => {\n      if (event.persisted) stop();\n    });\n    if (options.playOnInit) play();\n  }\n  function destroy() {\n    emblaApi.off('pointerDown', interaction);\n    if (!options.stopOnInteraction) emblaApi.off('pointerUp', reset);\n    stop();\n    timer = 0;\n  }\n  function play(jumpOverride) {\n    stop();\n    if (typeof jumpOverride !== 'undefined') jump = jumpOverride;\n    timer = window.setTimeout(next, options.delay);\n  }\n  function stop() {\n    if (!timer) return;\n    window.clearTimeout(timer);\n  }\n  function reset() {\n    if (!timer) return;\n    stop();\n    play();\n  }\n  function next() {\n    const {\n      index\n    } = emblaApi.internalEngine();\n    const lastIndex = emblaApi.scrollSnapList().length - 1;\n    const kill = options.stopOnLastSnap && index.get() === lastIndex;\n    if (kill) return destroy();\n    if (emblaApi.canScrollNext()) {\n      emblaApi.scrollNext(jump);\n    } else {\n      emblaApi.scrollTo(0, jump);\n    }\n    play();\n  }\n  const self = {\n    name: 'autoplay',\n    options: userOptions,\n    init,\n    destroy,\n    play,\n    stop,\n    reset\n  };\n  return self;\n}\nAutoplay.globalOptions = undefined;\n\nexport { Autoplay as default };\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}